#!/bin/bash

usage() {
    echo "$0 - Tool to compare house prises"
    echo
    echo "  -h/--help           Print help"
    echo "  --list-locations    List supported locations"
    echo
    echo "  -l <location_id>    Show statistics for <location_id>. Multiple" 
    echo "  -a                  All supported locations. (Takes a while)" 
    echo
    echo "  Types (default all)"
    echo "  -f                  Pick flats"
    echo "  -h                  Pick houses"
}

error() {
    color="\e[31m"
    usage_text=`usage`
    echo -e "${color}${1}\n\n\n${usage_text}" >&2
    exit 2
}

avg() {
    echo "${1} / ${2}" | bc
}

# Transform long options to short ones
for arg in "$@"; do
    shift
    case "$arg" in
        "--list-locations") set -- "$@" "-a" ;;
        "--help") set -- "$@" "-h" ;;
        *)        set -- "$@" "$arg"
    esac
done

list_locations=false
all_locations=false
flats=false
houses=false
locations=()
while getopts ":hAfhal:" opt; do
    case $opt in
        a)
            all_locations=true
        ;;
        A)
            list_locations=true
        ;;
        f)
            flats=true
        ;;
        h)
            houses=true
        ;;
        h)
            usage
            exit
        ;;
        l)
            locations=( "${locations[@]}" "$OPTARG")
        ;;
        \?)
            error "Invalid option: -$OPTARG"
        ;;
    esac
done

if ! $flats && ! $houses; then
    flats=true
    houses=true
fi

locations_file="locations.json"
declare -A all_locations
locations_json=`cat $locations_file | jq -Mc .[]`
while read -r line; do
    id=`echo $line | jq -Mc .id`
    name=`echo $line | jq -Mc .name`
    all_locations[$id]=$name
    if $list_locations; then
        echo -e "$id\t$name"
    fi
    if $all_locations; then
        locations=( ${locations[@]} $id )
    fi
done <<< "$locations_json"

if $list_locations; then
    exit
fi

for location in "${locations[@]}"
do
    objectTypes=""
    if $flats; then objectTypes="$objectTypes,LÃ¤genhet"; fi
    if $houses; then objectTypes="$objectTypes,Villa,Parhus,Radhus,Kedjehus"; fi
    endpoint="https://www.booli.se/slutpriser//$location/?objectType=${objectTypes:1}&sort=soldDate"
    result=`curl -sL "$endpoint"`
    records=`echo $result | grep --color=never  -o "\{\"soldPropertiesSearchURL.*\}" | jq -Mc .soldProperties[]`

    record_counter=0
    declare -A data
    data[price]=0
    data[sqm_price]=0
    while read -r record; do
        record_counter=$((record_counter + 1))
        # echo $record | jq .
        this_price=`echo $record | jq .soldPrice.raw`
        this_sqm_price=`echo $record | jq .soldSqmPrice.raw`
        data[price]=$((${data[price]} + $this_price))
        data[sqm_price]=$((${data[sqm_price]} + $this_sqm_price))
    done <<< "$records"

    avg_price=`avg ${data[price]} $record_counter`
    avg_sqm_price=`avg ${data[sqm_price]} $record_counter`
    echo ${all_locations[$location]} ${avg_price} ${avg_sqm_price}
done
